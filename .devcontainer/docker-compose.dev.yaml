version: '3.8'

services:
  next_app:
    container_name: next_app
    user: node

    # db container will start before the next_app container.
    depends_on:
      - db

    # when using Docker-outside-of-Docker (DooD), you need to ensure that the paths you're using in your Dockerfile and docker-compose file are accessible from the Docker daemon running on the host machine. this is why the LOCAL_WORKSPACE_FOLDER environment variable is used to refer to the Workspace host path. (defined in the .devcontainer/devcontainer.json file.)
    # The default value .. is used if its env variable is not set, so that the docker-compose.yaml file can work when it is run outside of the container.
    build:
      # On the otehr hand, your Dockerfile does not need to be modified for Docker-outside-of-Docker (DooD), because all the paths in the Dockerfile are relative to this build context.
      # where the image is built from.
      context: ${LOCAL_WORKSPACE_FOLDER:-..}
      # the path to the Dockerfile to use for building the image
      dockerfile: .devcontainer/Dockerfile.dev

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. (Adding the "ports" property to this file will not forward from a Codespace.)
    # ports:
    #  -

    # Volumes are the mechanism for persisting data generated by and used by Docker containers. these line here creats a bind mount, a type of volume that maps a host file or directory to a container file or directory.
    # it synchronizes changes between your local machine and the Docker container. Any changes you make to files in your local directory will be immediately reflected in the Docker container, and vice versa.
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-..}:/workspaces/discord-clone:cached
      # By mapping node_modules and prisma as a volume, the Docker container can access and use these dependencies just as if they were installed within the container itself. This can save significant time and resources because you don't need to reinstall your project's dependencies every time you build your Docker container.
      - ${LOCAL_WORKSPACE_FOLDER:-..}/node_modules:/workspaces/discord-clone/node_modules:cached
      - ${LOCAL_WORKSPACE_FOLDER:-..}/prisma:/workspaces/discord-clone/prisma:cached

    # adds entries to the /etc/hosts file inside a Docker container to be able to resolve certain hostnames that aren't available through DNS.
    extra_hosts:
      # The hostname host.docker.internal is a special DNS name used by Docker to refer to the host machine (the machine running the Docker daemon and containers).
      # The host-gateway value is a special Docker value that refers to the IP address of the host machine's default gateway. This is typically the IP address that the host machine uses to communicate with the outside world.
      # This line allows the Docker container to communicate with the Docker daemon running on the host machine.
      - host.docker.internal:host-gateway

    env_file:
      - ${LOCAL_WORKSPACE_FOLDER:-..}/.devcontainer/.env.development

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    # Runs next_app on the same network as the db container, allows "forwardPorts" in devcontainer.json function.
    networks:
      - next_app_network

  db:
    container_name: db
    image: postgres:16

    restart: unless-stopped

    # Named volumes postgres-data are managed by Docker and should work fine with Docker-outside-of-Docker (DooD), so you don't need to change this.
    volumes:
      - postgres-data:/var/lib/postgresql/data

    env_file:
      - ${LOCAL_WORKSPACE_FOLDER:-..}/.devcontainer/.env.development

    networks:
      - next_app_network

    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward PostgreSQL locally. (Adding the "ports" property to this file will not forward from a Codespace.)

volumes:
  node_modules:
  prisma:
  postgres-data:

# By default, Docker provides three network drivers: bridge, none, and host. The bridge network is the default network a Docker container gets attached to if no other network is specified. The bridge driver creates a private network internal to the host so containers on this network can communicate.
networks:
  next_app_network:
    driver: bridge
