name: CD on ghcr && DB migration

on:
  # triggered when a pull request is closed and merged to the main branch.
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build_push_migrate:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker Buildx is a CLI plugin that extends the docker command.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.prod
          # automatically replaces github.repository with the current repository's owner and name, as 'ghcr.io/${GITHUB_USERNAME}/${REPOSITORY_NAME}:latest'.
          tags: ghcr.io/${{ github.repository}}:latest

      # Prisma recommends running migrations to production as part of your CI/CD pipeline
      - name: Apply all pending migrations to the production database
        run: npx prisma migrate deploy --schema=./prisma/schema.prisma
        env:
          EXTERNAL_DATABASE_URL: ${{ secrets.EXTERNAL_DATABASE_URL }}
# TODO: strategy for handling migration failures:
# - Backup: Always backup your database before running migrations.
# - Rollback: If a migration fails, you should rollback the migration and restore the backup. Always test your migrations in a staging environment before running them in production.
# - Monitoring: Monitor your application and database performance after running migrations.
