// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.md"
  theme                     = "dark"
  includeRelationFromFields = true
  // You won't always need to generate a new ERD. For instance, when you are building your docker containers you often run prisma generate and if this generator is included, odds are you aren't relying on an updated ERD inside your docker container. It also adds additional space to the container because of dependencies such as puppeteer. There are two ways to disable this ERD generator.
  // disabled = true
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  email    String @unique
  imageUrl String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  conversationsStarted  Conversation[] @relation("Member1")
  conversationsReceived Conversation[] @relation("Member2")

  messages       Message[]
  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}

model Message {
  id        String  @id @default(uuid())
  content   String  @db.Text
  isDeleted Boolean @default(false)
  fileUrl   String? @db.Text

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  member1Id String
  member1   Member @relation("Member1", fields: [member1Id], references: [id], onDelete: Cascade)

  member2Id String
  member2   Member @relation("Member2", fields: [member2Id], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([member1Id, member2Id])
  @@index([member2Id])
}

model DirectMessage {
  id        String  @id @default(uuid())
  content   String  @db.Text
  isDeleted Boolean @default(false)
  fileUrl   String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
